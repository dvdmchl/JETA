
* * * Manual * * *

Na spustenie tochto programu budete potrebovat interpreter bajtoveho kodu
http://java.sun.com/j2se/1.4.2/download.html (JRE verziu)
Program bol robeny pre verziu 1.4.1_01 ale, mal by ist spustit
aj na novsich verziach. Bol testovany pod jre-1_5_0_01-windows. (Java Tiger)

Pomocou programu JETA sa daju vytvarat textove adventury, ktore sa
budu ovladat pomocou menu. Kazde menu sa musi skladat z 2 casi,
najskor sa vypisu akcie ktore sa v danej lokaci mozu robit
(ist, pozri, oslov ...), potom ako hrac vyberie jednu z tychto casti,
zobrazi sa mu menu v ktorom si blizsie urcuje danu cinnost.
(napr. pri kliknuti na "ist" sa mu zobrazia vsetky dostupne miesta)

Textovka sa vytvara tak, ze sa napise "dokument" podla preddefinovanych
pravidel, ktory bude definovat ako maju dane lokacie a akcie vyzerat.
Na pisanie sa da pouzit hocijaky textovy dokument, v ktorom sa NEDA
nastavit velkost pismen farby a tak. Napriklad poznamkovi blok.

Prikazy sa musia pisat velkymi tlacenymi PISMENAMI.
V nazvoch miest, premennych prikazov a pramaterov sa musia dodrziavat
take pismena ake sa pouzili prvykrat. ("dom" a "Dom" du dva rozdielne udaje)
Ak nejaky identifikator (napr. "zoznam veci") vyzaduje v svojom nazve medzeru
namiesto medzery sa napise "_" teda "zoznam_veci"

Dalej tu su ukazky zdrojovych kodov "DEMO_MUP.TXT" a "Ukazka.TXT"
DEMO_MUP.TXT - je ukazka textovky MuP, ktoru si mozete stiahnut z www.textovky.cz

Na zaciatku dokumentu sa musi zadat textovke meno, robi sa to pomocou prikazu
NAME, za ktorym nasleduje nazov textovky (napr. NAME nova textovka)
Nazov textovky je dolezity pri ukladani a nacitani pozicie, subor
do ktoreho sa ulozia udaje sa totiz vola podla nazvu textovky.

Pri vytvarani textovky sa textovy dokument rozdeli na niekolko casti, ktore
sa budu volat rovnako ako lokacie v hre. Robi sa to pomocou prikazu MIESTO
po ktorom nasleduje jednoslovny nazov lokacie (napr: MIESTO namestie).
Pod prikazom nasleduju prikazy pre danu lokaciu. Lokacia v ktorej bude hrac
na zaciatku sa musi volat "start"

priklad:

SETMIESTO start
 <prikazy pre uvodny text>
 <prikazy pre definiciu menu>
 <prikazy pre obsluhu akci ktore vzniknu v menu>

SETMIESTO namestie
 <prikazy pre uvodny text>
 <prikazy pre definiciu menu>
 <prikazy pre obsluhu akci ktore vzniknu v menu>

SETMIESTO ulica
 <prikazy pre uvodny text>
 <prikazy pre definiciu menu>
 <prikazy pre obsluhu akci ktore vzniknu v menu>

SETMIESTO obchod
 <prikazy pre uvodny text>
 <prikazy pre definiciu menu>
 <prikazy pre obsluhu akci ktore vzniknu v menu>

ALL
 <prikazy pre definiciu menu>
 <prikazy pre obsluhu akci ktore vzniknu v menu>
ENDALL

Kazda deficicia lokacie sa sklada z troch casti 
ktore musia byt v takom poradi v akom su napisane vyssie :

prikazy pre uvodny text
- Tu sa urcuje co sa napise pri prichode do lokacie

prikazy pre definiciu menu
- urcuje ako bude hlavne menu vyzerat a co sa stane, ked sa klikne
  na nejaku akciu v menu (napriklad po kliknuti na "ist" sa zobrazia
  moznosti ke sa da ist)

prikazy pre obsluhu akci ktore vzniknu v menu
- urcuje co sa ma stat ked pol vybrany prikaz (napr. "ist") a aj
  parameter k nemu (napr. "obchod")

V prikazovej zatvorke ALL/ENDALL sa nachazaju definicie menu
a akcie ktore sa opakuju v kazdej lokaci.
(Napriklad v kazdej lokaci chceme vydiet zoznam veci
a precitat si o nich info.)

Teraz sa blizsie pozrieme na kazdu s tychto casti :


Prikazy ktore sluzia na zobrazovanie textu su tieto :

OUT <text>
- zobrazi text na obrazovku
- prikaz bez textu vynecha riadok
- dalsi text sa bude pisat na dalsi riadok
- ak bude obrazovka plna riadky sa posunu ako v DOSe

priklad:
OUT hello world

CLS
- vymaze obrazovku

priklad:
CLS

PRESSKEY
- prestane vykonavat cinnost a caka kym hrac klikne na "ok"
  po kliknuti sa pokracuje vo vykonavani prikazov

priklad:
PRESSKEY

SHOWIMAGE <cesta k obrazku>

- Prikaz vycentruje obrazok do stredu textoveho okna
  a spusti prikaz PRESSKEY.
- Cesta k obrazku musi byt dana od cesty herneho scriptu.
  napiklad. ak je script na "C:\Textovka\Dokument.TXT"
  a obrazok je na "C:\Textovka\Image\Image.PNG" prikaz
  bude "SHOWIMAGE Image\Image.PNG"
- Podporuju si iba formaty GIF PNG JPG a JPEG

SOUND <cesta k obrazku>

- prikaz spusti skladbu vo formate *.mid *.midi *.rmf
- ak chcete dat do svojej textovky hudbu musite
  dat prikaz SOUND do kazdej definicie pri text ktory
  opisuje lokaciu
- ak sa pouzije prikaz SOUND bez suboru, hudba sa vypne
  (lokacia vlastne nema definovanu skladbu, ktoru ma hrat
   a tak nehra ziadnu)
- cesta ku skladbe musi byt pisana vzhladom na umiestnenie
  herneho scriptu.

Prikazy ktore sluzia na definicu menu su tieto :

SETMAINMENU <prikaz 1> <prikaz 2> ... <prikaz n>
- urcuje ake prikazy budu v hladvnom menu (ist, pozri, oslov)
- tento prikaz musi byt pouzite v kazdej lokaci pri definici
  menu a to pre pouzitim prikazu "ADDMENU"

priklad:
SETMAINMENU ist pozri oslov zober pouzi podaj zoznam_veci

ADDMENU <polozka v hlavnom menu> <parameter prikazu> 
- urcuje ake polozky sa maju zobrazit, ked sa klikne 
  na <polozku v hlavnom> menu.
- tento prikaz musi ist az po prikaze "SETMAINMENU"

priklad:
SETMAINMENU ist pozri oslov zober pouzi podaj zoznam_veci
ADDMENU ist ulica
ADDMENU ist obchodny_dom

REM ked sa klikne na prikaz "ist", zobrazia sa moznosti
REM "ulica" a "obchodny dom"

Prikazy ktore sluzia na obsluhu akci vzniknute v menu su tieto :

COMMAND <hlavny prikaz> <parameter prikazu>
 <prikazy ktore sa potom vykonaju> 
ENDCOMMAND

- urcuje co sa stane ked sa klikne na <hlavny prikaz> (napr. "ist")
  a potom aj na <parameter prikazu> (napr. "obchod")
- prikazy ktore sa potom vykonaju su medzi prikazmi COMMAND a ENDCOMMAND

SETMIESTO <miesto>
- urcuje na ake miesto ma hrac ist
- pozor na zaciklenie !!!

Teraz si mozeme ukazat priklad dvoch lokaci :

NAME ukazkova textovka

MIESTO start
SETMIESTO dom

MIESTO dom
OUT styri steni a v jednej su devre
REM viem mizerny opis

SETMAINMENU ist pozri oslov zober pouzi podaj zoznam_veci
ADDMENU ist von

COMMAND ist von
 SETMIESTO dvor 
ENDCOMMAND

MIESTO dvor
OUT hmm - tak toto je dvor
REM viem mizerny opis

SETMAINMENU ist pozri oslov zober pouzi podaj zoznam_veci
ADDMENU ist dom
ADDMENU pozri dom 

COMMAND ist dom
 SETMIESTO dom 
ENDCOMMAND

COMMAND pozri dom
 OUT vstupujte na vlastne riziko !
 PRESSKEY
ENDCOMMAND

Po priichode na prikaz ENDCOMMAND hra neskoci na popis lokacie,
tento dej sa musi vykonat explicitne napisanim pre prikaz ENDCOMMAND
prikaz SETMIESTO [miesto]

prikazy na lepsiu organizaciu kodu :

PODMIENKY :

Pomocu tychto prikazov by sme mohli vytvarat textovku v ktorej,
by hrac iba chodil, skumal objekty a kecal s ludmi na tu istu temu.
Nastastie su tu podmienky, ktore na zaklade hodnot v premennych
urcuju ci sa ma dany prikaz vykonat.

PREMMENNE :
- ich mena musia byt jednoslovne, alfanumericke a pre ich nazvom
  musi byt znak ":" napr. ":abc123" (znak ":" NEMOZE byt od ostatku
  nazvu oddeleny medzerou)
- musia obsahovat cele cisla bez uvedenia znamienka.
- ak sa niekde pouzije premenna, ktora neexistuje, vznikde a jej
  hodnota bude 0 (nula)

Praca s premennymi :

ZMEN <premenna> <hodnota>
- tento prikaz vytvara novu premennu, alebo meni hodnotu uz existujucej
  premennej.

priklad:

ZMEN :a 5
vznikne premenna :a ktora bude mat hodnotu 5

ZMEN :a 8
premenna :a bude mat hodnotu 8

ZMEN :b 4
vznikne premenna :b ktora bude mat hodnotu 4

ZMEN :a :b
premenna :a bude mat hodnotu premennej :b teda 4

ZMEN :a :c
premenna :a bude mat hodnotu premennej :c
premenna :c este neexistuje, tak vznikne a bude mat hodnotu 0
a tak aj premenna :a bude mat hodnotu 0

ZMEN :a 3+5
NEMOZNE do premennej musia byt zapisane hodnoty pomocu jedneho cisla.

PODMIENENIE PRIKAZOV :

(<podmienka 1> .. <podmienka n>) <prikaz>
Urcuje, ake podmienky maju byt splnene aby sa vykonal dany prikaz.
Ak neplati colen jedna pomienka, prikaz sa nevykona.
Zoznam prikazov, ktore sa nesmu podmienovat :
NAME,MIESTO,COMMAND,ENDCOMMAND.

Podmienka sa sklada z troch casti :
<hodnota 1> <operator> <hodnota 2>
operatorom moze byt "==" alebo "!="
- "==" znamena, ze podmienka plati ak sa obe hodnoty rovnaju
- "!=" znamena, ze podmienka plati ak sa obe hodnoty NErovnaju
- v nazve operatora nemoze byt medzera.

priklad :

(:a==5 :b!=:a)OUT prikaz sa vykonal !
REM prikaz sa vykona iba vtedy
REM ak ma premenna :a hodnotu 5 a premenna :b nema hodnotu premennej :a

ZAVER :

Dalej tu su este prikazy na zmenenie farby textu, menu a koniec.

SETTEXTCOLOR <COLOR R> <COLOR G> <COLOR B>
- nastavy farbu textu

SETMENUCOLOR <COLOR R> <COLOR G> <COLOR B>
- nastavy farbu menu

Farba sa udava v RGB.

priklad:
SETTEXTCOLOR 0 255 0 
SETMENUCOLOR 255 255 0

REM <komentar>
Ak budete potrebovat dat do svojho dokumetu komentar, ktory ma program ignorovat
dajte pred neho prikaz REM.

priklad:
REM komentar k hodnotam premennej.

END
- skonci program JETA

priklad:
END

DEBUGGER

org.dreamabout.sw.jeta.Debugger je nastroj na ladenie sciptov.
V okne debuggera sa zobrazuju prikazy, ktore sa vykonali
(prikaz OUT sa pre prehladnost nezobrazuje).
Debuggeru sa mozu zadavat aj prikazy :

CLS - vymaz okno
SAVE - uloz poziciu do sejvu pre debuuger
LOAD - nacitaj poziciu zo sejvu pre debuuger

:premenna [hodnota]
-zmen hodnotu premennej na [hodnota]

priklady :
:a 5
:b :a

:premenna
- zobrazi hodnotu premennej.

miesto
- mojde na miesto [miesto]

SIFROVANIE HERNEHO SCRIPTU

Ked ste dokoncili textovku a nechcete, aby kazdy mal moznost vidiet
jej script pripadne menit vase dielo, mozete dokument zasifrovat.
Robi sa to tak, ze v menu programe kliknete na moznost "Zaï¿½ifruj subor..".
Zasiforvany scipt sa ulozi do suboru cislo+SCRIPT.JETA.
Tento subor sa da rovnako interpretovat ako bezny nezasifrovany dokumet.
Jeho nazov sa moze menit, ale koncova pripona (".JETA") nie,
podla tejto pripony interpreter pozna, ze je subor sifrovany.
Pre sifrovany script sa nemoze spustit debugger.
 
OPERATORI

Interpreter sa da spustit aj s operatormi.

JETA.JAT [operatori] [herny scipt]

[operatori] :
"-fill" fillscreen mod (znie to lepsie ako vyzera)
  Klavesou medzera sa zobrazuje/skryva horna lista.
"-platform" komponenty v okne budu mat vzhlad operacneho
  systemu na ktorom bol program spusteny.
"-nosound" interpreter ignoruje prikaz "SOUND"
"-noimage" interpreter ignoruje prikaz "SHOWIMAGE"

[subor] :
subor ktory sa ma po spusteni nacitat.

priklad :
JETA.JAR -fill -platform -noimage -nosound Scipt.SCR

---
Duï¿½an ï¿½urech [Oroborus]
Dusan.D@Centrum.Sk
http://oroborus.wz.cz